<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tiletest on benpm.github.io</title><link>https://benpm.github.io/tags/tiletest/</link><description>Recent content in tiletest on benpm.github.io</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 20 Sep 2020 10:41:59 -0600</lastBuildDate><atom:link href="https://benpm.github.io/tags/tiletest/index.xml" rel="self" type="application/rss+xml"/><item><title>Quadtrees for 2D Games with Moving Elements</title><link>https://benpm.github.io/blog/quadtrees/</link><pubDate>Sun, 20 Sep 2020 10:41:59 -0600</pubDate><guid>https://benpm.github.io/blog/quadtrees/</guid><description>&lt;p>A quadtree is a very useful data structure for performing spatial searches. I am currently using them in &lt;a href="https://benpm.github.io/gamedev/#tiletest"
>Tiletest&lt;/a> for collision detection and monster behavior. Quadtrees partition 2D space into quadrants (stored as nodes in a tree), dividing these quadrants into smaller quadrants when they contain more than a certain threshold of elements (shown as dots):&lt;/p>
&lt;p>&lt;img class="invertable drawing" src="https://benpm.github.io/images/quadtrees/quadrant_division.png" alt="Quadrant division">&lt;/p>
&lt;p>There are a couple uses for this structure, one of the most useful is searching for the nearest element to a given location.&lt;/p>
&lt;h2 id="nearest-element-to-chosen-location">Nearest Element to Chosen Location&lt;/h2>
&lt;p>To find the nearest element to a chosen location, there are &lt;a href="https://stackoverflow.com/a/32412425/2909339"
target="_blank" rel="noreferrer noopener"
>many algorithms out there&lt;/a>. I went with a simple yet efficient one, a breadth-first search with quadrant exclusion. First, we look through each leaf node at the highest level of the tree, keeping track of the closest element we&amp;rsquo;ve found so far. Then, we check the next level of the tree, and so on. The exclusion part is just skipping our search of nodes that cannot contain a closer element than the closest we&amp;rsquo;ve found so far. Here&amp;rsquo;s a simple example:&lt;/p>
&lt;p>&lt;img class="invertable drawing" src="https://benpm.github.io/images/quadtrees/quadrant_exclusion.png" alt="Exclusion of nodes based on signed distance">&lt;/p>
&lt;p>To do this, we calculate the smallest distance (shown as blue lines) from our search location (the blue dot) to a node&amp;rsquo;s rectangular boundary. This gives us the shortest distance an element of this node could possibly have. If that shortest distance is farther than the nearest element so far (red dot), we don&amp;rsquo;t search it &lt;em>or&lt;/em> its children (excluded nodes are shown in grey).&lt;/p>
&lt;p>This works fairly well on its own, but to make it more efficient, we will also try to search the closest nodes first. This avoids extra data structure accesses by excluding nodes as early as possible.&lt;/p>
&lt;p>Here you can see this algorithm in action:&lt;/p>
&lt;p class="codepen" data-height="431" data-theme-id="light" data-default-tab="result" data-user="_bm" data-slug-hash="ExPBMrW" style="height: 431px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 2em 0 2em 0; padding: 1em;" data-pen-title="AABB Collisions Test">
&lt;/p>
&lt;script async src="https://static.codepen.io/assets/embed/ei.js">&lt;/script>
&lt;p>This is just a static set of elements, though. Things get a little tricky when the elements are constantly moving.&lt;/p>
&lt;h2 id="dealing-with-moving-elements--relocation">Dealing With Moving Elements / Relocation&lt;/h2>
&lt;p>The naive solution to moving elements is to walk through the whole tree, checking if each element&amp;rsquo;s position is truly within the bounds of its current parent node, reinserting those that have do not pass the check.&lt;/p>
&lt;p>This solution can be improved, as it needs to traverse the whole tree in order to perform relocation. Instead, let&amp;rsquo;s have the elements themselves keep track of which node they are children of. This way, we can check that they are within bounds without traversing the tree. If an element has moved outside its bounds, then we reinsert it.&lt;/p>
&lt;p>Another optimization involves not worrying about leftover empty leaf nodes. Checking if the parent node we just removed from is easy enough, but sometimes if we remove an element from the last populated node of its siblings, the parent node won&amp;rsquo;t get removed. To solve this we can either check all ancestors of a node each time we remove an element (expensive), or we can worry about it later (the lazy, cheap choice, better when lots of elements are moving constantly).&lt;/p>
&lt;p>In Tiletest, this has led to a huge performance improvement as many entities need information about their neighbors every tick. Here you can see slimes grouping together, which is done by finding the nearest slime and moving away from it each tick:&lt;/p>
&lt;p>&lt;img src="https://benpm.github.io/images/quadtrees/2020-10-20_20-21.png" alt="tiletest">&lt;/p>
&lt;p>More updates on the game later!&lt;/p></description></item><item><title>Rectangle (AABB) Collisions</title><link>https://benpm.github.io/blog/2d-top-down-collisions-with-rectangles-aabbs/</link><pubDate>Wed, 22 Jul 2020 22:10:40 -0600</pubDate><guid>https://benpm.github.io/blog/2d-top-down-collisions-with-rectangles-aabbs/</guid><description>&lt;p>Axis-aligned bounding boxes (AABBs) are very useful for doing simple collision detection and 2D physics.
The basic idea is: loop through the boxes, checking for intersections with each other box. Then, you resolve
these intersections by moving the boxes in the direction of the shortest intersection axis. So if the width
of the intersection is smaller than its height, like it is here, then the boxes are moved on the x axis:&lt;/p>
&lt;p>&lt;img class="invertable drawing" src="https://benpm.github.io/images/aabb/boxes.png" alt="">&lt;/p>
&lt;p>I will be using these types of collisions for the game I am developing. The game is top-down. It looks like this:&lt;/p>
&lt;p>&lt;img src="https://benpm.github.io/images/2020-07-22_23-41.png" alt="">&lt;/p>
&lt;p>So the physics doesn&amp;rsquo;t actually need to have fancy features like bounce (restitution). What it does need is
to be stable and fast.&lt;/p>
&lt;p>There are a couple things I&amp;rsquo;ll need to do to acheive both of these goals. First, I&amp;rsquo;ll need to make it stable. Without any modifications, the simple collision algorithm creates far too much jiggliness, especially when there are a lot of boxes pushing on each other all at once. This happens because during a collision pass, a box may be pushed by a collision into another box, causing an intersection. However, this intersection won&amp;rsquo;t be resolved until the next pass.&lt;/p>
&lt;p>&lt;img class="invertable drawing" src="https://benpm.github.io/images/aabb/boxes2.png" alt="">&lt;/p>
&lt;p>In order to solve this issue, I&amp;rsquo;ve decided to run multiple passes of collision resolution on the boxes before each
update step. The update step is where velocity is applied to position, friction is applied, etc.
Here is the result of using multiple passes:&lt;/p>
&lt;p class="codepen" data-height="431" data-theme-id="light" data-default-tab="result" data-user="_bm" data-slug-hash="xxZMjXb" style="height: 431px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 2em 0 2em 0; padding: 1em;" data-pen-title="AABB Collisions Test">
&lt;/p>
&lt;script async src="https://static.codepen.io/assets/embed/ei.js">&lt;/script>
&lt;p>As you can see, there are still some minor issues. When a constant force is applied, the boxes vibrate slightly. Also, when there is a big pile, they tend to overlap. It&amp;rsquo;s also pretty slow, since each box needs to check against each other box each collision pass, and there are multiple collision passes now.&lt;/p>
&lt;p>To solve this issue with speed, I&amp;rsquo;ll probably end up using &lt;a href="https://www.wikiwand.com/en/Quadtree"
target="_blank" rel="noreferrer noopener"
>quadtrees&lt;/a> for neighbor lookup, but that&amp;rsquo;s for another time!&lt;/p></description></item></channel></rss>